#
# GitHub Actions Workflow to automatically build the NGINX ACME module
# for the latest Debian Stable release, with versioned artifact naming.
#
# This workflow is triggered by:
# 1. A push to the 'master' branch.
# 2. A manual dispatch from the Actions UI.
#

name: Build and Release NGINX ACME Module

on:
  workflow_dispatch:
    inputs:
      nginx_version:
        # --- FIX: Changed the description to English ---
        description: 'Optional: Specify an NGINX version to build (e.g., 1.28.0)'
        required: false
        default: ''
  schedule:
    - cron: '30 5 * * *'
  push:
    branches:
      - master

# Grant permissions for the GITHUB_TOKEN to create releases.
permissions:
  contents: write

jobs:
  # This job checks if a build is necessary.
  check-for-new-version:
    name: Check for New NGINX Stable Version
    runs-on: ubuntu-latest
    outputs:
      should_build: ${{ steps.check_versions.outputs.should_build }}
      version: ${{ steps.check_versions.outputs.version }}
    steps:
      - name: Determine version and if build is needed
        id: check_versions
        run: |
          MANUAL_VERSION="${{ github.event.inputs.nginx_version }}"

          if [ -n "$MANUAL_VERSION" ]; then
            echo "Manual version specified: $MANUAL_VERSION. Forcing build."
            echo "should_build=true" >> "$GITHUB_OUTPUT"
            echo "version=$MANUAL_VERSION" >> "$GITHUB_OUTPUT"
          else
            echo "No manual version specified. Detecting latest stable version..."
            LATEST_STABLE=$(curl -s https://nginx.org/download/ | \
              grep -o 'nginx-[0-9.]\+\.tar\.gz' | \
              sed -e 's/nginx-//' -e 's/\.tar\.gz//' | \
              awk -F. '$2 % 2 == 0' | \
              sort -V | \
              tail -n 1)

            if [ -z "$LATEST_STABLE" ]; then
              echo "ERROR: Failed to parse latest stable NGINX version."
              exit 1
            fi
            echo "Latest stable NGINX version is: $LATEST_STABLE"

            LATEST_RELEASE_TAG=$(curl -sf -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/releases/latest" | \
              jq -r .tag_name || true)

            if [ -z "$LATEST_RELEASE_TAG" ]; then
              echo "No previous release found. Triggering initial build."
              echo "should_build=true" >> "$GITHUB_OUTPUT"
            else
              LAST_RELEASED_VERSION=$(echo "$LATEST_RELEASE_TAG" | sed 's/^nginx-//')
              echo "Last released version is: $LAST_RELEASED_VERSION"
              if [ "$LATEST_STABLE" != "$LAST_RELEASED_VERSION" ]; then
                echo "New version detected ($LATEST_STABLE). Proceeding with build."
                echo "should_build=true" >> "$GITHUB_OUTPUT"
              else
                echo "Version $LATEST_STABLE is already the latest. Build skipped."
                echo "should_build=false" >> "$GITHUB_OUTPUT"
              fi
            fi
            echo "version=$LATEST_STABLE" >> "$GITHUB_OUTPUT"
          fi

  # This job builds the module on the latest Debian Stable release.
  build-debian:
    name: Build for Debian Stable
    needs: check-for-new-version
    if: needs.check-for-new-version.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    container: debian:stable

    steps:
      # Step 1: Install all necessary dependencies.
      - name: Install Build Dependencies
        run: |
          apt-get update
          apt-get install -y --no-install-recommends \
            build-essential libclang-dev pkg-config libpcre2-dev zlib1g-dev libssl-dev \
            libxml2-dev libxslt1-dev libgd-dev libgeoip-dev libperl-dev \
            wget git curl ca-certificates

      # Step 2: Install the Rust toolchain.
      - name: Install Rust Toolchain
        uses: dtolnay/rust-toolchain@stable

      # Step 3: Download source code and build the module.
      - name: Download and Build
        env:
          NGINX_VERSION: ${{ needs.check-for-new-version.outputs.version }}
        run: |
          wget -q http://nginx.org/download/nginx-$NGINX_VERSION.tar.gz
          tar -zxf nginx-$NGINX_VERSION.tar.gz
          git clone --depth 1 https://github.com/nginx/nginx-acme.git
          cd nginx-$NGINX_VERSION

          BUILD_PATH=$(pwd)
          CC_OPT_VALUE="-g -O2 -ffile-prefix-map=$BUILD_PATH=. -fstack-protector-strong -Wformat -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -fPIC"

          ./configure \
            --with-cc-opt="$CC_OPT_VALUE" \
            --with-ld-opt='-Wl,-z,relro -Wl,-z,now -Wl,--as-needed -fPIC' \
            --prefix=/usr/share/nginx \
            --conf-path=/etc/nginx/nginx.conf \
            --http-log-path=/var/log/nginx/access.log \
            --error-log-path=/var/log/nginx/error.log \
            --lock-path=/var/lock/nginx.lock \
            --pid-path=/run/nginx.pid \
            --modules-path=/usr/lib/nginx/modules \
            --http-client-body-temp-path=/var/lib/nginx/body \
            --http-fastcgi-temp-path=/var/lib/nginx/fastcgi \
            --http-proxy-temp-path=/var/lib/nginx/proxy \
            --http-scgi-temp-path=/var/lib/nginx/scgi \
            --http-uwsgi-temp-path=/var/lib/nginx/uwsgi \
            --with-compat \
            --with-debug \
            --with-pcre-jit \
            --with-http_ssl_module \
            --with-http_stub_status_module \
            --with-http_realip_module \
            --with-http_auth_request_module \
            --with-http_v2_module \
            --with-http_dav_module \
            --with-http_slice_module \
            --with-threads \
            --with-http_addition_module \
            --with-http_gunzip_module \
            --with-http_gzip_static_module \
            --with-http_mp4_module \
            --with-http_random_index_module \
            --with-http_secure_link_module \
            --with-http_sub_module \
            --with-mail_ssl_module \
            --with-stream_ssl_module \
            --with-stream_ssl_preread_module \
            --with-stream_realip_module \
            --with-http_geoip_module=dynamic \
            --with-http_image_filter_module=dynamic \
            --with-http_perl_module=dynamic \
            --with-http_xslt_module=dynamic \
            --with-mail=dynamic \
            --with-stream=dynamic \
            --with-stream_geoip_module=dynamic \
            --add-dynamic-module=../nginx-acme/

          make modules

      # Step 4: Prepare the compiled module and its SHA256 checksum for upload.
      - name: Verify and Prepare Artifact
        env:
          NGINX_VERSION: ${{ needs.check-for-new-version.outputs.version }}
        run: |
          ls -l nginx-$NGINX_VERSION/objs/
          MODULE_PATH="nginx-$NGINX_VERSION/objs/ngx_http_acme_module.so"

          if [ ! -f "$MODULE_PATH" ]; then
            echo "::error::Build failed! The module file '$MODULE_PATH' was not created."
            exit 1
          fi

          echo "Build successful. Module file found at '$MODULE_PATH'"

          ARTIFACT_DIR=artifact
          mkdir -p $ARTIFACT_DIR
          MODULE_NAME="ngx${NGINX_VERSION}_http_acme_module.so"
          mv "$MODULE_PATH" "$ARTIFACT_DIR/$MODULE_NAME"
          cd $ARTIFACT_DIR
          sha256sum "$MODULE_NAME" > "$MODULE_NAME.sha256"


      # Step 5: Upload the artifact to be used in the release job.
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: module-debian-stable
          path: artifact/

  # This job creates a GitHub Release after the build is successful.
  create-release:
    name: Create GitHub Release
    needs: [check-for-new-version, build-debian]
    if: needs.check-for-new-version.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./dist

      - name: List downloaded files for debugging
        run: ls -R ./dist

      - name: Prepare release content
        id: prep
        run: |
          mkdir -p release-assets
          find ./dist -name "*.so" -exec mv {} ./release-assets/ \;
          echo "### SHA256 Checksum" > release-body.md
          echo '```' >> release-body.md
          find ./dist -name "*.sha256" -exec cat {} + >> release-body.md
          echo '```' >> release-body.md
          {
            echo "body<<EOF"
            cat release-body.md
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: nginx-${{ needs.check-for-new-version.outputs.version }}
          name: NGINX ACME Module for NGINX ${{ needs.check-for-new-version.outputs.version }}
          body: ${{ steps.prep.outputs.body }}
          files: ./release-assets/*
